export function SMA(values, period){const o=new Array(values.length).fill(null);if(period<=0)return o;let s=0;for(let i=0;i<values.length;i++){const v=+values[i];if(Number.isFinite(v))s+=v;if(i>=period){const old=+values[i-period];if(Number.isFinite(old))s-=old;}if(i>=period-1)o[i]=s/period;}return o;}
export function EMA(values, period){const o=new Array(values.length).fill(null);const k=2/(period+1);let ema=null;for(let i=0;i<values.length;i++){const v=+values[i];if(!Number.isFinite(v)){o[i]=ema;continue;}ema=ema==null?v:(v-ema)*k+ema;o[i]=ema;}return o;}
export function MACD(values,fast=12,slow=26,signal=9){const ef=EMA(values,fast), es=EMA(values,slow);const macd=values.map((_,i)=>{const a=ef[i],b=es[i];return (a==null||b==null)?null:a-b});const sig=EMA(macd.map(v=>v==null?0:v),signal).map((v,i)=>macd[i]==null?null:v);const hist=macd.map((v,i)=>(v==null||sig[i]==null)?null:v-sig[i]);return {macd:macd,signal:sig,hist};}
export function Bollinger(values,period=20,mult=2){const mid=SMA(values,period), up=new Array(values.length).fill(null),down=new Array(values.length).fill(null);for(let i=0;i<values.length;i++){if(mid[i]==null)continue;const st=i-period+1;const w=values.slice(Math.max(0,st),i+1).map(Number).filter(Number.isFinite);if(w.length<period)continue;const m=mid[i];const variance=w.reduce((a,x)=>a+(x-m)*(x-m),0)/period;const sd=Math.sqrt(variance);up[i]=m+mult*sd;down[i]=m-mult*sd;}return {mid,up,down};}
export function RSI(values,period=14){const o=new Array(values.length).fill(null);if(period<=0)return o;let g=0,l=0;for(let i=1;i<=period;i++){const ch=(+values[i])-(+values[i-1]);if(!Number.isFinite(ch))continue;if(ch>0)g+=ch;else l-=ch;}let ag=g/period, al=l/period;o[period]=al===0?100:100-(100/(1+(ag/al)));for(let i=period+1;i<values.length;i++){const ch=(+values[i])-(+values[i-1]);const G=ch>0?ch:0, L=ch<0?-ch:0;ag=((ag*(period-1))+G)/period;al=((al*(period-1))+L)/period;o[i]=al===0?100:100-(100/(1+(ag/al)));}return o;}
